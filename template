#include <ctype.h>
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef int16_t sample;
size_t BUFLEN = 4096/sizeof(sample);


/* printf args 2+ to stderr and exit with nonzero status. */
void
die(char *errfmt, ...)
{
	va_list argp;
	va_start(argp, errfmt);
	vfprintf(stderr, errfmt, argp);
	va_end(argp);
	fputc('\n', stderr);
	exit(EXIT_FAILURE);
}

int
main(int argc, char **argv)
{
	setbuf(stdout, NULL);

	unsigned int samplei = 0;  // count of samples written
	char *line = NULL;  // input command
	ssize_t len;  // length of input command
	size_t _;
	// <Description of how each line is processed>
	while ((len = getline(&line, &_, stdin)) != -1) {
		if (line[len-1] != '\n')
			die("CMD: got partial command (no newline): %s", line);
		line[--len] = '\0';
	
		// Parse next sample index to <take action>
		char *cmd;
		unsigned long cmdi = (errno=0, strtoul(line, &cmd, 10));
		if (errno)
			die("CMD: strtoul for cue '%s': %s", line, strerror(errno));
		if (cmdi < samplei)
			die("CMD: command '%s' out of order", line);

		// Write up to the next cmd index
		/* code here */
		samplei = cmdi;
		if ((cmd++ - line) == len)  // no command
			continue;
	}
	if (ferror(stdin))
		die("CMD: getline: %s", strerror(errno));
}
